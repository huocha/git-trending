{"version":3,"sources":["components/footer/footer.component.tsx","actions/index.ts","components/filter_group/filter_group.component.tsx","components/pagination/pagination.component.tsx","components/context.ts","components/repository_card/repository_card.component.tsx","components/repository_list/repository_list.component.tsx","components/search_input/search_input.component.tsx","views/home_page/home_page.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["FooterComponent","className","css","src","href","fetchRepositories","fromDate","currentPage","lang","searchQuery","query","toLowerCase","url","Promise","resolve","reject","fetch","then","res","json","result","setRepositories","items","setTotalPages","total_count","catch","error","totalPages","localStorage","setItem","String","repositories","JSON","stringify","getRepositories","results","getItem","parse","FilterGroup","props","onClearCache","onShowAll","onFilterStaredRepo","React","useState","selectedLang","setSelectedLang","filterGroupStyle","onClick","onFilterLanguage","undefined","LANGUAGES","map","index","Pagination","setCurrentPage","pageKeys","Array","keys","i","renderPageItem","item","onPageChanged","PaginationStyle","RepoContextProvider","createContext","repoResults","toggleStar","id","RepositoryCard","html_url","description","stargazers_count","full_name","language","updated_at","useContext","repositoryCardStyle","moment","format","RepositoryList","repositoryListStyle","SearchInput","searchValue","setSearchValue","searchInputStyle","type","placeholder","onKeyDown","event","key","onSearch","onChange","e","target","value","HomePage","setResults","useRef","currentLang","didMount","fetchData","useCallback","page","a","add","current","Math","min","floor","console","warn","useEffect","onToggleStar","findIndex","rated","state","homePageStyle","Provider","staredRepos","filter","clear","length","memo","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e0064b04.chunk.js","sourcesContent":["import React from \"react\";\nimport { css } from \"@emotion/css\";\nconst footerComponentStyle = () =>\n  css`\n    label: footer-wrapper;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    padding: 20px 0;\n    img {\n      width: 30px;\n      height: 30px;\n      border-radius: 15px;\n      padding-bottom: 8px;\n    }\n    a {\n      text-decoration: none;\n      padding-left: 4px;\n      color: #a38e80;\n    }\n  `;\nexport const FooterComponent = () => {\n  return (\n    <footer className={footerComponentStyle()}>\n      <img src=\"https://media0.giphy.com/media/mVJ5xyiYkC3Vm/giphy.gif?cid=790b7611ad2812b1ccf7f99cf2e9764d8ac87928c092140a&rid=giphy.gif\" />\n      <small>\n        Â© 2021 by\n        <a href=\"https://j-nguyenn.github.io/git-trending/\">JASMINE NG </a>\n      </small>\n    </footer>\n  );\n};\n","import { RepositoryCardProps } from \"../components/repository_card/repository_card.interface\";\n\nexport const fetchRepositories = (\n  fromDate: string,\n  currentPage: number,\n  lang?: string,\n  searchQuery?: string\n): Promise<{ total_count: number; items: RepositoryCardProps[] }> => {\n  let query = `q=created:>${fromDate}`;\n  if (lang) {\n    query += `+language:${lang.toLowerCase()}`;\n  }\n  if (searchQuery) {\n    query += searchQuery;\n  }\n  const url = `https://api.github.com/search/repositories?${query}&sort=stars&order=desc&page=${currentPage}`;\n\n  return new Promise((resolve, reject) => {\n    fetch(url)\n      .then((res) => res.json())\n      .then((result) => {\n        resolve(result);\n        setRepositories(result?.items);\n        setTotalPages(result?.total_count);\n      })\n      .catch((error) => {\n        reject(error);\n      });\n  });\n};\n\nexport const setTotalPages = (totalPages: number): void => {\n  localStorage.setItem(\"totalPages\", String(totalPages));\n};\n\nexport const getTotalPages = (): number => {\n  const pages = localStorage.getItem(\"totalPages\") ?? \"\";\n  return JSON.parse(pages);\n};\n\nexport const setRepositories = (repositories: RepositoryCardProps[]): void => {\n  if (repositories) {\n    localStorage.setItem(\"repositories\", JSON.stringify(repositories));\n  }\n};\n\nexport const getRepositories = (): RepositoryCardProps[] => {\n  const results = localStorage.getItem(\"repositories\") ?? \"[]\";\n  return JSON.parse(results);\n};\n\nexport const toggleStar = (id: string): void => {\n  const repositoryList = getRepositories();\n  const selectedRepository = repositoryList.find((item) => item.id === id);\n  if (selectedRepository) {\n    if (selectedRepository.rated) {\n      selectedRepository.stargazers_count -= 1;\n      selectedRepository.rated = false;\n    } else {\n      selectedRepository.stargazers_count += 1;\n      selectedRepository.rated = true;\n    }\n  }\n\n  setRepositories(repositoryList);\n};\n","import React from \"react\";\nimport { css } from \"@emotion/css\";\nimport { FilterGroupProps } from \"./filter_group.interface\";\n\nconst FilterGroup = (props: FilterGroupProps) => {\n  const { onClearCache, onShowAll, onFilterStaredRepo } = props;\n  const [selectedLang, setSelectedLang] = React.useState<string>();\n\n  const renderLanguageOptions = () => {\n    return (\n      <div className=\"languages-list\">\n        <div\n          className={`language-item ${!selectedLang && \"selected\"}`}\n          onClick={() => {\n            props.onFilterLanguage(\"\");\n            setSelectedLang(undefined);\n          }}\n        >\n          Any\n        </div>\n        {LANGUAGES.map((lang, index) => {\n          return (\n            <div\n              className={`language-item ${\n                selectedLang === lang ? \"selected\" : \"\"\n              } `}\n              key={index}\n              onClick={() => {\n                props.onFilterLanguage(lang);\n                setSelectedLang(lang);\n              }}\n            >\n              {lang}\n            </div>\n          );\n        })}\n      </div>\n    );\n  };\n\n  return (\n    <div className={filterGroupStyle()}>\n      <div className=\"section\">\n        <small>Languages: </small>\n        {renderLanguageOptions()}\n      </div>\n\n      <div className=\"section end\">\n        <button className=\"link-btn\" onClick={onClearCache}>\n          Clear cache\n        </button>\n        <button className=\"styled-btn\" onClick={onShowAll}>\n          Show all repo\n        </button>\n        <button className=\"styled-btn star-btn\" onClick={onFilterStaredRepo}>\n          <i className=\"fa fa-star\"></i>\n          Stared repo\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default FilterGroup;\n\nconst filterGroupStyle = () => css`\n  label: filter-group;\n  display: flex;\n  padding-top: 12px;\n  flex-direction: column;\n  .languages-list {\n    padding-left: 4px;\n    display: flex;\n    .language-item {\n      padding: 2px 8px;\n      &: hover {\n        cursor: pointer;\n        background: rgba(27, 31, 35, 0.05);\n      }\n    }\n    .selected {\n      background: rgba(27, 31, 35, 0.08);\n    }\n  }\n  .section {\n    padding-top: 5px;\n    display: flex;\n  }\n  .end {\n    justify-content: flex-end;\n  }\n\n  .styled-btn {\n    border: 0;\n    border-radius: 4px;\n    padding: 4px 8px;\n    margin-right: 4px;\n    margin-left: 4px;\n    &:hover {\n      cursor: pointer;\n    }\n  }\n\n  .star-btn {\n    background: #388bfd;\n    text-align: center;\n    color: #fff;\n  }\n\n  .link-btn {\n    border: 0;\n    background: transparent;\n\n    &:hover {\n      cursor: pointer;\n    }\n  }\n`;\n\nconst LANGUAGES = [\"JavaScript\", \"Ruby\", \"HTML\", \"CSS\", \"Typescript\", \"Java\"];\n","import { css } from \"@emotion/css\";\nimport React from \"react\";\nimport { PaginationProps } from \"./pagination.interface\";\n\nconst Pagination = (props: PaginationProps) => {\n  const [currentPage, setCurrentPage] = React.useState(1);\n\n  const pageKeys = [...Array(10).keys()].map((i) => i + 1);\n\n  const renderPageItem = (item: number) => {\n    return (\n      <div\n        key={item}\n        className={`page-item ${currentPage === item ? \"selected\" : \"\"}`}\n        onClick={() => {\n          setCurrentPage(item);\n          props.onPageChanged(item);\n        }}\n      >\n        {item}\n      </div>\n    );\n  };\n  const renderPagination = () => {\n    return <>{pageKeys.map(renderPageItem)}</>;\n  };\n  return <div className={PaginationStyle()}>{renderPagination()}</div>;\n};\n\nexport default Pagination;\n\nconst PaginationStyle = () => css`\n  label: pagination-card;\n  display: flex;\n  justify-content: center;\n  padding-bottom: 15px;\n  .selected {\n    background: rgba(27, 31, 35, 0.08);\n  }\n  .page-item {\n    padding: 0 5px;\n    &:hover {\n      cursor: pointer;\n      background: rgba(27, 31, 35, 0.05);\n    }\n  }\n`;\n","import React from \"react\";\n\nconst RepoContextProvider = React.createContext({\n  repoResults: [{}],\n  toggleStar: (id: string) => {},\n});\n\nexport default RepoContextProvider;\n","import { css } from \"@emotion/css\";\nimport moment from \"moment\";\nimport React from \"react\";\nimport RepoContextProvider from \"../context\";\nimport { RepositoryCardProps } from \"./repository_card.interface\";\n\nconst RepositoryCard = (props: RepositoryCardProps) => {\n  const {\n    id,\n    html_url,\n    description,\n    stargazers_count,\n    full_name,\n    language,\n    updated_at,\n  } = props;\n\n  const { toggleStar } = React.useContext(RepoContextProvider);\n\n  return (\n    <div className={repositoryCardStyle()}>\n      <div className=\"repo-left\">\n        <div className=\"repo-star\" onClick={() => toggleStar(id)}>\n          <div className=\"repo-star-number\">{stargazers_count}</div>\n          <span>{stargazers_count > 1 ? \"stars\" : \"star\"}</span>\n        </div>\n        <div className=\"repo-main\">\n          <a href={html_url}>{full_name}</a>\n          <div>{description}</div>\n          <small>Updated at: {moment(updated_at).format(\"DD MMM YYYY\")}</small>\n        </div>\n      </div>\n\n      <div className=\"repo-outro\">\n        <div>{language}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default RepositoryCard;\n\nconst repositoryCardStyle = () => css`\n  label: repository-card;\n  display: flex;\n  border-radius: 5px;\n  border: 1px solid rgb(232, 232, 232);\n  padding: 6px;\n  margin: 15px 0;\n  flex: 1;\n  justify-content: space-between;\n  text-align: left;\n  font-size: 13px;\n  .repo-left {\n    display: flex;\n    flex-basis: 90%;\n  }\n  .repo-outro {\n    flex-basis: 10%;\n  }\n  .repo-star {\n    justify-content: center;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    width: 10%;\n    .repo-star-number {\n      font-size: 22px;\n    }\n    &:hover {\n      cursor: pointer;\n      color: #388bfd;\n    }\n  }\n  .repo-main {\n    padding-left: 8px;\n    max-width: 86%;\n    max-height: 51px;\n    overflow: hidden;\n  }\n`;\n","import { css } from \"@emotion/css\";\nimport React from \"react\";\nimport RepositoryCard from \"../repository_card/repository_card.component\";\nimport { RepositoryListProps } from \"./repository_list.interface\";\n\nconst RepositoryList = (props: RepositoryListProps) => {\n  const { items } = props;\n\n  return (\n    <div className={repositoryListStyle()}>\n      {items.map((item, index) => (\n        <RepositoryCard key={index} {...item} />\n      ))}\n    </div>\n  );\n};\n\nexport default RepositoryList;\n\nconst repositoryListStyle = () => css`\n  label: repository-list;\n`;\n","import { css } from \"@emotion/css\";\nimport React from \"react\";\nimport { SearchInputProps } from \"./search_input.interface\";\n\nconst SearchInput = (props: SearchInputProps) => {\n  const [searchValue, setSearchValue] = React.useState<string>(\"\");\n\n  return (\n    <div className={searchInputStyle()}>\n      <div className=\"wrap\">\n        <div className=\"search\">\n          <input\n            type=\"text\"\n            className=\"search-term\"\n            placeholder=\"Search ...\"\n            onKeyDown={(event) => {\n              if (event.key === \"Enter\") {\n                props.onSearch(searchValue);\n              }\n            }}\n            onChange={(e) => setSearchValue(e.target.value)}\n          ></input>\n          <button\n            type=\"submit\"\n            className=\"searchButton\"\n            onClick={() => props.onSearch(searchValue)}\n          >\n            <i className=\"fa fa-search\"></i>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SearchInput;\n\nconst searchInputStyle = () => css`\n  label: search-input;\n\n  .search {\n    width: 100%;\n    display: flex;\n  }\n\n  .search-term {\n    width: 100%;\n    border: 3px solid #388bfd;\n    border-right: none;\n    padding: 5px;\n    height: 20px;\n    border-radius: 5px 0 0 5px;\n    outline: none;\n    &:focus {\n      color: #388bfd;\n    }\n  }\n\n  .searchButton {\n    width: 40px;\n    height: 36px;\n    border: 1px solid #388bfd;\n    background: #388bfd;\n    text-align: center;\n    color: #fff;\n    border-radius: 0 5px 5px 0;\n    cursor: pointer;\n    font-size: 20px;\n  }\n`;\n","import { css } from \"@emotion/css\";\nimport moment from \"moment\"; // date-fns\nimport React, { useCallback } from \"react\";\nimport {\n  fetchRepositories,\n  setRepositories,\n  getRepositories,\n} from \"../../actions\";\nimport FilterGroup from \"../../components/filter_group/filter_group.component\";\nimport Pagination from \"../../components/pagination/pagination.component\";\nimport { RepositoryCardProps } from \"../../components/repository_card/repository_card.interface\";\nimport RepositoryList from \"../../components/repository_list/repository_list.component\";\nimport SearchInput from \"../../components/search_input/search_input.component\";\nimport RepoContextProvider from \"../../components/context\";\n\nconst HomePage = () => {\n  const [repoResults, setResults] = React.useState<RepositoryCardProps[]>([]);\n  const totalPages = React.useRef<number>(1);\n  const currentPage = React.useRef<number>(1);\n  const currentLang = React.useRef<string>(\"\");\n  const didMount = React.useRef<boolean>(false);\n\n  const fetchData = React.useCallback(\n    async (page: number, lang?: string, searchQuery?: string) => {\n      const fromDate = moment().add(-1, \"w\").format(\"YYYY-MM-DD\");\n      const result = await fetchRepositories(fromDate, page, lang, searchQuery);\n      try {\n        const { items, total_count } = result;\n        totalPages.current = Math.min(Math.floor(total_count / 30), 10);\n        setResults(items);\n      } catch {\n        console.warn(\"error\");\n      }\n    },\n    []\n  );\n\n  React.useEffect(() => {\n    totalPages.current = 10;\n    if (!didMount.current) {\n      fetchData(1);\n    }\n    didMount.current = true;\n  }, []);\n\n  const onClearCache = () => {\n    localStorage.clear();\n    fetchData(1);\n  };\n\n  const renderMainResult = () => {\n    if (didMount.current && !repoResults?.length) {\n      return <div>Oops! No result found</div>;\n    } else {\n      return <RepositoryList items={repoResults} />;\n    }\n  };\n\n  const onToggleStar = useCallback(\n    (id: string) => {\n      const index = repoResults.findIndex((item) => item.id === id);\n\n      if (index !== -1) {\n        if (repoResults[index].rated) {\n          repoResults[index].stargazers_count -= 1;\n          repoResults[index].rated = false;\n        } else {\n          repoResults[index].stargazers_count += 1;\n          repoResults[index].rated = true;\n        }\n      }\n      setResults((state) => {\n        return [...state];\n      });\n      setRepositories(repoResults);\n    },\n    [repoResults]\n  );\n\n  return (\n    <div className={homePageStyle()}>\n      <div className=\"header\">\n        <h1>Git-Trending</h1>\n      </div>\n      <RepoContextProvider.Provider\n        value={{ repoResults, toggleStar: onToggleStar }}\n      >\n        <SearchInput\n          onSearch={(value) => {\n            fetchData(currentPage.current, currentLang.current, value);\n          }}\n        />\n        <FilterGroup\n          onFilterStaredRepo={() => {\n            const staredRepos = repoResults.filter((result) => result.rated);\n            setResults(staredRepos);\n          }}\n          onFilterLanguage={(lang) => {\n            currentLang.current = lang;\n            fetchData(currentPage.current, lang);\n          }}\n          onShowAll={() => {\n            setResults(getRepositories());\n          }}\n          onClearCache={onClearCache}\n        />\n        {renderMainResult()}\n        <Pagination\n          totalPages={totalPages.current}\n          onPageChanged={(page) => {\n            currentPage.current = page;\n            fetchData(page, currentLang.current);\n          }}\n        />\n      </RepoContextProvider.Provider>\n    </div>\n  );\n};\n\nexport default React.memo(HomePage);\n\nconst homePageStyle = () => css`\n  label: home-page;\n  max-width: 780px;\n  margin: auto;\n`;\n","import React from \"react\";\nimport \"./App.css\";\nimport { FooterComponent } from \"./components/footer/footer.component\";\nimport HomePage from \"./views/home_page/home_page\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HomePage />\n      <FooterComponent />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}